{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"DugonSNAP","text":"<p>Welcome to the DugonSNAP introduction to get started.</p>"},{"location":"#introduction","title":"Introduction","text":""},{"location":"#what-is-the-snap-suffix","title":"What is the SNAP suffix?","text":"<p>SNAP, short for \"Smart Network Action Protocol\", is a concept that proposes an action-based smart grid. This network is highly reactive and designed to respond autonomously at the edge to predefined behaviors or dynamic changes within the network.</p>"},{"location":"#how-dugonsnap-works-in-a-nutshell","title":"How DugonSNAP works in a nutshell?","text":"<p>DugonSNAP is an intelligent communication system composed of client and reactive server, with multiple actions/events, over a protocol called \u201cTCP\u201d, using MongoDB for persistence.</p> <p>DugonSNAP exposes something called \"events/actions\", which are basically similar to endpoints with predefined behaviors, but in addition to that, clients on your DugonSNAP network can create dynamic events with unique behaviors.</p> <p>Server: The DugonSNAP server is responsible for redirecting packets to clients on the network, and also reacts to predefined network actions.</p> <p>Client: Clients on the DugonSNAP network have a list of predefined events, as well as the dynamic event system, to add more events with unique actions to those already available for them.</p>"},{"location":"#methaphor-and-concept","title":"Methaphor and concept","text":"<p>DugonSNAP is based on a naval metaphor.</p> <p> Ship(Server): is responsible for moving any packets on the network to clients.</p> <p></p> <p> - Dock(Client): It is where containers and packages are packed for the ship to take.</p> <p></p> <p> - Containers</p> <p>Containers: A container is a living behavior carrier, in which all the behaviors that you want to execute on the target are packaged.</p> <p>Containers use the JSON format, which can be cumbersome and resource-intensive, but helps users understand and prototype quickly and easily.</p> <p>Containers are carriers of events and actions, not useful information.</p>"},{"location":"#streaming-system-and-binary-packages","title":"Streaming system and binary packages","text":"<p>Both the streaming system and the binary packages are useful in DugonSNAP, since they work together.</p> <p> - Streaming System: The streaming system was created to send information with zero overhead in general, reducing resource consumption and maximizing flexibility for the client, offering \"tags\" to execute special events of the tag, as well as including a dynamic event system. These events can be created remotely from other clients on the network, including unique behaviors in such streaming.</p> <ul> <li>Binary Packages: Binary packets carry a set of bytes, with no special predefined format, just pure bytes, such packets are queued in the client streamings.</li> </ul>"},{"location":"#binary-header","title":"Binary Header","text":"<p>The binary header is present in any packet on the network, whether it is a Container or a Binary Packet, the job of this binary header is to route and parse the packet.</p> <p>The binary header works with pure bytes, using its own format.</p>"},{"location":"#origin-of-the-name","title":"Origin of the name","text":"<p>\"Dugon\" takes its name from the marine mammal \"Dugong\", chosen to represent the balance between strength, stability and intelligent system design.</p>"},{"location":"Actions/actions/","title":"Actions","text":"<p>Actions, behaviors sent through containers from the client to the server, which can only be interpreted by the server.</p>"},{"location":"Actions/actions/#purpose","title":"Purpose","text":"<p>Separation of logic: client-client (Events) and client-server (Actions).</p>"},{"location":"Actions/Channel-Actions/createChannel/createChannel/","title":"CreateChannel","text":"<p>This action is used to create a channel in the DugonSNAP network.</p>"},{"location":"Actions/Channel-Actions/createChannel/createChannel/#parameters","title":"Parameters","text":"<ul> <li> <p>channel(string): name of the new channel.</p> </li> <li> <p>hash(string): password of the new channel.</p> </li> </ul>"},{"location":"Actions/Channel-Actions/createChannel/createChannel/#example","title":"Example","text":"<pre><code>{\n    \"CreateChannel\": {\n        \"channel\": \"News\",\n        \"hash\": \"62362\"\n    }\n}\n</code></pre>"},{"location":"Actions/Channel-Actions/deleteChannel/deleteChannel/","title":"DeleteChannel","text":"<p>This action deletes the channel from memory and the database.</p>"},{"location":"Actions/Channel-Actions/deleteChannel/deleteChannel/#parameters","title":"Parameters","text":"<ul> <li> <p>channel(string): Name of the channel to be removed.</p> </li> <li> <p>hash(string): password of the channel to delete.</p> </li> </ul>"},{"location":"Actions/Channel-Actions/deleteChannel/deleteChannel/#example","title":"Example","text":"<pre><code>{\n    \"DeleteChannel\": {\n        \"channel\": \"Fire\",\n        \"hash\": \"739\"\n    }\n}\n</code></pre>"},{"location":"Actions/Channel-Actions/subscribeChannel/subscribeChannel/","title":"SubscribeChannel","text":"<p>This action is used to subscribe to a specific channel.</p>"},{"location":"Actions/Channel-Actions/subscribeChannel/subscribeChannel/#parameters","title":"Parameters","text":"<ul> <li> <p>channel(string): Name of the channel to subscribe.</p> </li> <li> <p>hash(string): password of the channel to subscribe.</p> </li> </ul>"},{"location":"Actions/Channel-Actions/subscribeChannel/subscribeChannel/#example","title":"Example","text":"<pre><code>{\n    \"Subscribe\": {\n        \"channel\": \"News\",\n        \"hash\": \"0342\"\n    }\n}\n</code></pre>"},{"location":"Actions/Channel-Actions/unsubscribeChannel/unsubscribeChannel/","title":"UnsubscribeChannel","text":"<p>This action is used to unsubscribe from a channel.</p>"},{"location":"Actions/Channel-Actions/unsubscribeChannel/unsubscribeChannel/#parameters","title":"Parameters","text":"<ul> <li>channel(string): channel from which you unsubscribed.</li> </ul>"},{"location":"Actions/Channel-Actions/unsubscribeChannel/unsubscribeChannel/#example","title":"Example","text":"<pre><code>{\n    \"Unsubscribe\": \"News\"\n}\n</code></pre>"},{"location":"Channel/channel/","title":"Channel","text":"<p>Channels were primarily created to group customers on the network.</p> <p>With channels you can separate customers into groups.</p>"},{"location":"Channel/channel/#persistence","title":"Persistence","text":"<p>Channels are persistent over the network with MongoDB.</p>"},{"location":"Events/events/","title":"Events","text":"<p>In DugonSNAP, events are behaviors that go inside containers.</p> <p>The events system are specific to the client side, such events cannot be executed by the server.</p>"},{"location":"Events/events/#purpose","title":"Purpose","text":"<p>The event system was created to automate everyday use on the SNAP network. With these events, you have an abstraction layer that will help you communicate efficiently with the different devices on the network.</p>"},{"location":"Events/Redirection-Events/redirectList/redirectList/","title":"redirectList","text":"<p>This simple but useful event is used to automate the sending of a packet to multiple clients on the network.</p>"},{"location":"Events/Redirection-Events/redirectList/redirectList/#parameters","title":"Parameters","text":"<ul> <li>redirectList(array): Here is the list of clients where the package will be redirected.</li> </ul>"},{"location":"Events/Redirection-Events/redirectList/redirectList/#example","title":"Example","text":"<pre><code>{\n    \"redirectList\": [\"emma\",\"sophia\",\"Noah\",\"Liam\"]\n}\n</code></pre>"},{"location":"Events/Redirection-Events/redirectTo/redirectTo/","title":"redirectTo","text":"<p>This event is used to send the same package on behalf of the target client.</p>"},{"location":"Events/Redirection-Events/redirectTo/redirectTo/#parameters","title":"Parameters","text":"<ul> <li>redirectTo(string): only requires specifying the objective</li> </ul>"},{"location":"Events/Redirection-Events/redirectTo/redirectTo/#example","title":"Example","text":"<pre><code>{\n    \"redirectTo\": \"Liam\"\n}\n</code></pre>"},{"location":"Events/Stream-Events/chainingStream/chainingStream/","title":"chainingStream","text":"<p>This event iterates over all the packets, merging them into one, re-queuing the already joined packets.</p>"},{"location":"Events/Stream-Events/chainingStream/chainingStream/#parameters","title":"Parameters","text":"<ul> <li>name(string): Name of the stream where packets will be joined.</li> </ul>"},{"location":"Events/Stream-Events/chainingStream/chainingStream/#example","title":"Example","text":"<pre><code>{\n    \"chainingStream\": {\n        \"name\": \"main.py\"\n    }\n}\n</code></pre>"},{"location":"Events/Stream-Events/createDynamicEvent/createDynamicEvent/","title":"createDynamicEvent","text":"<p>This event is used to create dynamic events in streaming.</p> <p>Dynamic events in streaming are scripts on disk, that upon completion, return a handback that is sent on the SNAP network.</p>"},{"location":"Events/Stream-Events/createDynamicEvent/createDynamicEvent/#parameters","title":"Parameters","text":"<ul> <li> <p>streaming(string): Streaming where it will take the script and create the dynamic event.</p> </li> <li> <p>path(string): path where the dynamic event script is saved.</p> </li> <li> <p>eventName(string): Name of the dynamic event to be invoked.</p> </li> <li> <p>handback(bool): The handback is a container that will be sent at the end of the dynamic event script.</p> </li> </ul>"},{"location":"Events/Stream-Events/createDynamicEvent/createDynamicEvent/#example","title":"Example","text":"<pre><code>{\n    \"createDynamicEvent\": {\n        \"streaming\": \"Fire\",\n        \"path\": \"./api/cache/dynamic/main.py\",\n        \"eventName\": \"put out fire\",\n        \"handback\": false\n    }\n}\n</code></pre> <p>When sending this event, the first packet sent to the stream will be used as a dynamic event as a script.</p>"},{"location":"Events/Stream-Events/createStream/createStream/","title":"createStream","text":"<p>With this event you can create streams on any client.</p>"},{"location":"Events/Stream-Events/createStream/createStream/#parameters","title":"Parameters","text":"<ul> <li> <p>name(string): The name of the streaming, this will be used to identify it in the future.</p> </li> <li> <p>type(string): The type is a tag that can be added to streams individually, depending on their functionality or purpose in the network. Depending on the type of tag you choose, you will have different predefined events that can be used at any time during streaming.</p> </li> <li> <p>size(int): streaming queue size, such queue is emptied when packets are collected by the client itself or remote clients on the network.</p> </li> </ul>"},{"location":"Events/Stream-Events/createStream/createStream/#example","title":"Example","text":"<pre><code>{\n    \"createStream\": {\n        \"name\": \"coordinates\",\n        \"type\": \"\",\n        \"size\": 12\n    }\n}\n</code></pre>"},{"location":"Events/Stream-Events/requestData/requestData/","title":"requestData","text":"<p>This event is used to take a packet from one stream and send it to another stream on the specified client.</p>"},{"location":"Events/Stream-Events/requestData/requestData/#parameters","title":"Parameters","text":"<ul> <li> <p>user(string): Client where the package will be redirected.</p> </li> <li> <p>streaming(string): Name of the stream from which the packet will be taken to be redirected.</p> </li> <li> <p>enqueue(string): Name of the stream where the requested packet will be queued.</p> </li> </ul>"},{"location":"Events/Stream-Events/requestData/requestData/#example","title":"Example","text":"<pre><code>{\n    \"requestData\": {\n        \"user\": \"Sophia\",\n        \"streaming\": \"news\",\n        \"enqueue\": \"MyNews\"\n    }\n}\n</code></pre>"},{"location":"Events/Stream-Events/spawnChunk/spawnChunk/","title":"spawnChunk","text":""},{"location":"Events/Stream-Events/spawnChunk/spawnChunk/#chunk-system","title":"Chunk System","text":"<p>create a chunk in a specific stream.</p>"},{"location":"Events/Stream-Events/spawnChunk/spawnChunk/#parameters","title":"Parameters","text":"<ul> <li> <p>name(string): name of the streaming where the chunk will be applied.</p> </li> <li> <p>size(int): maximum size in bytes of the chunk.</p> </li> </ul>"},{"location":"Events/Stream-Events/spawnChunk/spawnChunk/#example","title":"Example","text":"<pre><code>{\n    \"spawnChunk\": {\n        \"name\": \"coordinates\",\n        \"size\": 500\n    }\n}\n</code></pre>"},{"location":"Events/Stream-Events/startScript/startScript/","title":"startScript","text":"<p>This stream event only works with the \"SCRIPT\" tag, it takes the first packet sent to the stream and executes it remotely on the target.</p>"},{"location":"Events/Stream-Events/startScript/startScript/#parameters","title":"Parameters","text":"<ul> <li>startScript(string): the name of the stream where the script will be executed remotely.</li> </ul>"},{"location":"Events/Stream-Events/startScript/startScript/#example","title":"Example","text":"<pre><code>{\n    \"startScript\": \"main.py\"\n}\n</code></pre>"},{"location":"Events/channel-Events/subscribe/subscribe/","title":"Subscribe","text":"<p>This event is used to remotely subscribe clients to specific channels on the SNAP network.</p>"},{"location":"Events/channel-Events/subscribe/subscribe/#parameters","title":"Parameters","text":"<ul> <li> <p>channel(string): The name of the channel where the client will connect.</p> </li> <li> <p>hash(string): The channel password on the SNAP network.</p> </li> </ul>"},{"location":"Events/channel-Events/subscribe/subscribe/#example","title":"Example","text":"<pre><code>{\n    \"subscribeChannel\": {\n        \"channel\": \"News\",\n        \"hash\": \"09023\"\n    }\n}\n</code></pre> <p>After sending this the target will start receiving packets from the channel.</p>"},{"location":"Events/channel-Events/unsubcribe/unsubscribe/","title":"Unsubscribe","text":"<p>This event is useful for remotely unsubscribing clients from channels on the SNAP network.</p>"},{"location":"Events/channel-Events/unsubcribe/unsubscribe/#parameters","title":"Parameters","text":"<ul> <li>channel(string): Channel from which the client will be unsubscribed.</li> </ul>"},{"location":"Events/channel-Events/unsubcribe/unsubscribe/#example","title":"Example","text":"<pre><code>{\n    \"unsubscribeChannel\": {\n        \"channel\" \"News\"\n    }\n}\n</code></pre> <p>After sending this package, the target will no longer be subscribed to that channel and will therefore no longer receive updates from it.</p>"},{"location":"Persistence/persistence/","title":"Persistence","text":"<p>DugonSNAP uses MongoDB as its database for persistence.</p>"},{"location":"Persistence/persistence/#on-demand","title":"On-Demand","text":"<p>DugonSnap manages database data on demand, meaning that not all channels, customers, or other elements are loaded upon startup. Data is loaded only when required, reducing resource consumption.</p>"},{"location":"Streaming/stream/","title":"Stream System","text":""},{"location":"Streaming/stream/#streaming-system","title":"Streaming System","text":"<p>The streaming system is a fast and efficient way to send real-time data, minimizing resource consumption and adding layers of abstraction to maximize automation and client flexibility. It provides various tools for working with it, such as tags to trigger special events and a dynamic event system. These events can be created remotely from other clients on the network, including unique behaviors in the stream. The system works on the client side, generating a kind of local queues that collect and queue the packets sent to them for immediate collection.</p>"},{"location":"Streaming/chunk/chunk/","title":"Chunk System","text":"<p>A chunk is used to control the lifetime of a stream.</p> <p>A chunk is simply a delimiter for the total number of bytes a specific stream accepts. When the specified number of bytes is exceeded, the stream is automatically closed and stops accepting packets.</p>"},{"location":"Streaming/tags/tags/","title":"Tags","text":"<p>Tags unlock unique streaming capabilities, dividing streams by functionality and goals on the SNAP network.</p>"},{"location":"Streaming/tags/tags/#purpose","title":"Purpose","text":"<p>Tags were initially created to divide the workflow between streams. This system unlocks different features and systems within streams, allowing for the separation of responsibilities and providing a layer of abstraction for users.</p>"},{"location":"Streaming/tags/tags/#immutability","title":"Immutability","text":"<p>Tags in a stream cannot be changed or modified; they are immutable by nature, as they were designed to separate workflows and avoid causing confusion for other clients on the network.</p>"},{"location":"Streaming/tags/tag-list/script/script/","title":"Script","text":"<p>This tag is used to send scripts via streaming, offering tools for this type of workflow.</p>"},{"location":"Streaming/tags/tag-list/script/script/#use","title":"Use","text":"<p>To properly apply this tag, it's not just a matter of creating a \"SCRIPT\" type stream; you also need to add formatting for the type of programming language you're running.</p> <p>Such as \"main.py\", \"master.go\" in the streaming name.</p>"},{"location":"Streaming/tags/tag-list/script/script/#events","title":"Events","text":"<p>Among the events offered by this tag are:</p> <ul> <li>startScript: evento</li> </ul>"}]}